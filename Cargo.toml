[package]
name = "egui-wgpu"
edition = "2021"
license = "MIT OR Apache-2.0"
rust-version = "1.80"
version = "0.29.1"
description = "Bindings for using egui natively using the wgpu library"
authors = [
  "Nils Hasenbanck <nils@hasenbanck.de>",
  "embotech <opensource@embotech.com>",
  "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>",
]
homepage = "https://github.com/emilk/egui/tree/master/crates/egui-wgpu"
readme = "README.md"
repository = "https://github.com/emilk/egui/tree/master/crates/egui-wgpu"
categories = ["gui", "game-development"]
keywords = ["wgpu", "egui", "gui", "gamedev"]
include = [
  "../LICENSE-APACHE",
  "../LICENSE-MIT",
  "**/*.rs",
  "**/*.wgsl",
  "Cargo.toml",
]

[lints]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--generate-link-to-definition"]

[features]
default = ["fragile-send-sync-non-atomic-wasm"]

## Enable profiling with the [`puffin`](https://docs.rs/puffin) crate.
puffin = ["dep:puffin"]

## Enable [`winit`](https://docs.rs/winit) integration. On Linux, requires either `wayland` or `x11`
winit = ["dep:winit", "winit/rwh_06"]

## Enables Wayland support for winit.
wayland = ["winit?/wayland"]

## Enables x11 support for winit.
x11 = ["winit?/x11"]

## Make the renderer `Sync` on wasm, exploiting that by default wasm isn't multithreaded.
## It may make code easier, expecially when targeting both native and web.
## On native most wgpu objects are send and sync, on the web they are not (by nature of the WebGPU specification).
## This is not supported in [multithreaded WASM](https://gpuweb.github.io/gpuweb/explainer/#multithreading-transfer).
## Thus that usage is guarded against with compiler errors in wgpu.
fragile-send-sync-non-atomic-wasm = ["wgpu/fragile-send-sync-non-atomic-wasm"]

[dependencies]
egui = { git = "https://github.com/emilk/egui.git", branch = "master" }
epaint = { git = "https://github.com/emilk/egui", tag = "0.29.1", features = ["bytemuck"] }

ahash = { version = "0.8.11", default-features = false, features = [
    "no-rng", # we don't need DOS-protection, so we let users opt-in to it instead
    "std",
] }
bytemuck = "1.7.2"
document-features = "0.2.10"
log = { version = "0.4", features = ["std"] }
thiserror = "1.0.37"
type-map = "0.5.0"
web-time = "1.1.0" # Timekeeping for native and web

# Optional dependencies:

winit = { git = "https://github.com/mehrbod2002/winit", branch = "window_attribute", optional = true, default-features = false }
wgpu = "23.0.1"

# Native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
puffin = { version = "0.19", optional = true }
